package sk.is.urso;

import org.alfa.utils.XmlUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.transaction.annotation.Transactional;
import org.xml.sax.SAXException;
import sk.is.urso.be.Application;
import sk.is.urso.config.csru.CsruEndpoint;
import sk.is.urso.config.timers.NedoplatkyTimer;
import sk.is.urso.config.timers.UrsoSubjectUpdateTimer;
import sk.is.urso.controller.NedoplatkyController;
import sk.is.urso.enums.CsruNavratovyKodOperacie;
import sk.is.urso.enums.CsruStavZiadosti;
import sk.is.urso.enums.SpNedoplatok;
import sk.is.urso.enums.UrsoNedoplatokTyp;
import sk.is.urso.enums.UrsoSubjectStav;
import sk.is.urso.enums.ZpNedoplatok;
import sk.is.urso.enums.ZpPoistovna;
import sk.is.urso.enums.ZpPopisKoduVysledkuSpracovania;
import sk.is.urso.model.FsOsobaZaznam;
import sk.is.urso.model.SpOsobaZaznam;
import sk.is.urso.model.SpStavZiadost;
import sk.is.urso.model.SpVysledokKontroly;
import sk.is.urso.model.SpVystupnySubor;
import sk.is.urso.model.UrsoSubjectStack;
import sk.is.urso.model.ZpOsobaZaznam;
import sk.is.urso.model.ZpStavZiadost;
import sk.is.urso.model.ZpVysledokKontroly;
import sk.is.urso.model.ZpVystupnySubor;
import sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetStatusResponseCType;
import sk.is.urso.model.csru.api.sync.GetConsolidatedDataServiceSync.GetConsolidatedDataResponseCType;
import sk.is.urso.model.urso.SetDlznici;
import sk.is.urso.model.urso.SetDlzniciObdobie;
import sk.is.urso.model.urso.SetDlzniciRefresh;
import sk.is.urso.repository.FsOsobaZaznamRepository;
import sk.is.urso.repository.SpOsobaZaznamRepository;
import sk.is.urso.repository.SpStavZiadostRepository;
import sk.is.urso.repository.ZpOsobaZaznamRepository;
import sk.is.urso.repository.ZpStavZiadostRepository;
import sk.is.urso.repository.urso.SetDlzniciObdobieRepository;
import sk.is.urso.repository.urso.SetDlzniciRefreshRepository;
import sk.is.urso.repository.urso.SetDlzniciRepository;
import sk.is.urso.repository.urso.UrsoSubjectStackRepository;
import sk.is.urso.rest.model.CsruDruhDaneAleboPohladavkyEnum;
import sk.is.urso.rest.model.CsruNavratovyKodOperacieEnum;
import sk.is.urso.rest.model.CsruNedoplatokChybovyKodEnum;
import sk.is.urso.rest.model.CsruNedoplatokEnum;
import sk.is.urso.rest.model.CsruStavZiadostiEnum;
import sk.is.urso.rest.model.InstituciaEnum;
import sk.is.urso.rest.model.Nedoplatok;
import sk.is.urso.rest.model.SubjektNedoplatokVstupnyDetail;
import sk.is.urso.rest.model.SubjektVystupnyDetail;
import sk.is.urso.service.SftpService;

import javax.xml.parsers.ParserConfigurationException;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyBoolean;
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.ArgumentMatchers.anyString;

@ExtendWith(SpringExtension.class)
@SpringBootTest(classes = {Application.class}, webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureMockMvc
public class NedoplatkyTest {

    public static final String FS = "<GetConsolidatedDataResponse xmlns=\"http://csru.gov.sk/csru_getconsolidateddata_sync/v1.4\" xmlns:ns2=\"http://csru.gov.sk/common/v1.4\" xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\r\n            <csruTransactionId>65f8f5b2-664c-4c2e-afa3-c4ecdbfd9fa5</csruTransactionId>\r\n            <ovmTransactionId>7fce168b-b1a7-4741-946f-36d2bfa28sh5</ovmTransactionId>\r\n            <ovmCorrelationId>ff407e56-f101-4f41-9958-e442a19793l5</ovmCorrelationId>\r\n            <resultCode>0</resultCode>\r\n            <consolidatedData>\r\n                <FSDanoveNedoplatky xmlns=\"http://csru.gov.sk/oe_nedoplatky/v1.0\">\r\n                    <DanSubj>\r\n                        <DIC>2022606509</DIC>\r\n                        <ICO>44162588</ICO>\r\n                        <ObchMenoNazov>.. TOPRO s. r. o.</ObchMenoNazov>\r\n                        <AdresaTrvPobytuSidla>\r\n                            <Ulica>Wuppert\\u00E1lska</Ulica>\r\n                            <OrientacneSupisneCislo>55</OrientacneSupisneCislo>\r\n                            <Obec>Ko\\u0161ice - mestsk\\u00E1 \\u010Das\\u0165 S\\u00EDdlisko KVP</Obec>\r\n                            <Psc>04023</Psc>\r\n                            <Stat>SK</Stat>\r\n                        </AdresaTrvPobytuSidla>\r\n                        <DanNedoplatokPohladavka>\r\n                            <DruhPohladavky>\r\n                                <Typ>NDS</Typ>\r\n                            </DruhPohladavky>\r\n                            <Datum>2024-06-30</Datum>\r\n                            <Nedoplatok>1</Nedoplatok>\r\n                            <ErrorCode>0</ErrorCode>\r\n                        </DanNedoplatokPohladavka>\r\n                        <DanNedoplatokPohladavka>\r\n                            <DruhPohladavky>\r\n                                <Typ>SPD</Typ>\r\n                            </DruhPohladavky>\r\n                            <Datum>2024-06-30</Datum>\r\n                            <Nedoplatok>0</Nedoplatok>\r\n                            <ErrorCode>0</ErrorCode>\r\n                        </DanNedoplatokPohladavka>\r\n                        <DanNedoplatokPohladavka>\r\n                            <DruhPohladavky>\r\n                                <Typ>COL</Typ>\r\n                            </DruhPohladavky>\r\n                            <Datum>2024-06-30</Datum>\r\n                            <Nedoplatok>0</Nedoplatok>\r\n                            <ErrorCode>0</ErrorCode>\r\n                        </DanNedoplatokPohladavka>\r\n                    </DanSubj>\r\n                </FSDanoveNedoplatky>\r\n            </consolidatedData>\r\n        </GetConsolidatedDataResponse>";
    public static final String SP = "<GetConsolidatedDataResponse xmlns=\"http://csru.gov.sk/csru_getconsolidateddata/v1.4\" xmlns:ns2=\"http://csru.gov.sk/common/v1.4\" xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\r\n            <csruTransactionId>cff8bf43-fd35-4471-802c-009479f693e4</csruTransactionId>\r\n            <ovmTransactionId>326c33a2-a605-4857-af5a-fe6c07de6874</ovmTransactionId>\r\n            <ovmCorrelationId>326c33a2-a605-4857-af5a-fe6c07Fe7984</ovmCorrelationId>\r\n            <resultCode>0</resultCode>\r\n            <requestId>16798002</requestId>\r\n        </GetConsolidatedDataResponse>";
    public static final String ZP = "<GetConsolidatedDataResponse xmlns=\"http://csru.gov.sk/csru_getconsolidateddata/v1.4\" xmlns:ns2=\"http://csru.gov.sk/common/v1.4\" xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\r\n            <csruTransactionId>d21ee469-4769-4d8b-bc67-1395a09a1c6c</csruTransactionId>\r\n            <ovmTransactionId>326c33a2-a605-4857-af5a-fe6c07de6877</ovmTransactionId>\r\n            <ovmCorrelationId>326c33a2-a605-4857-af5a-fe6c07Fe7987</ovmCorrelationId>\r\n            <resultCode>0</resultCode>\r\n            <requestId>16798772</requestId>\r\n        </GetConsolidatedDataResponse>";
    public static final String SP_STAV_ZIADOSTI = "<GetProgressResponse xmlns=\"http://csru.gov.sk/csru_getconsolidateddata/v1.4\" xmlns:ns2=\"http://csru.gov.sk/common/v1.4\" xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\r\n            <csruTransactionId>208e977b-1817-4fd9-8f6e-ce6969f74a6a</csruTransactionId>\r\n            <ovmTransactionId>b109407b-53a4-4934-803d-6ecc44cc05a4</ovmTransactionId>\r\n            <ovmCorrelationId>f4bc265c-a672-4e60-a6a2-4f36a865d5c7</ovmCorrelationId>\r\n            <resultCode>0</resultCode>\r\n            <status>1</status>\r\n            <fileList>\r\n                <ns2:file>\r\n                    <ns2:path>/out/SP_NEDOPLATKY_OVERSI_16798002_20240717114446.xml</ns2:path>\r\n                </ns2:file>\r\n            </fileList>\r\n        </GetProgressResponse>";
    public static final String ZP_STAV_ZIADOSTI = "<GetStatusResponse xmlns=\"http://csru.gov.sk/csru_getconsolidateddata/v1.4\" xmlns:ns2=\"http://csru.gov.sk/common/v1.4\" xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\r\n            <csruTransactionId>0652bff7-0ff7-4732-9747-a954829d3729</csruTransactionId>\r\n            <ovmTransactionId>59fe6c7f-8ebd-48ff-a2f3-c8bfd39763b8</ovmTransactionId>\r\n            <ovmCorrelationId>e3cd6221-aedd-4872-a525-9e50781c921c</ovmCorrelationId>\r\n            <resultCode>0</resultCode>\r\n            <status>1</status>\r\n            <fileList>\r\n                <ns2:file>\r\n                    <ns2:path>/out/ZP_ODVODY_16798772_20240717135017.xml</ns2:path>\r\n                </ns2:file>\r\n            </fileList>\r\n        </GetStatusResponse>";
    public static final String SP_OBSAH_SUBORU = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<ns2:checkArrearsResultServiceRes xmlns:ns2=\"http://v1_0.result.check.arrears.service.integration.socpoist.datalan.sk\" xmlns:soap=\"http://www.w3.org/2003/05/soap-envelope\">\r\n  <requestId>3d30d26a-406f-4284-b985-f48a105a55a8</requestId>\r\n  <resultInfo>\r\n    <csruStatus>0</csruStatus>\r\n    <osbStatusDescription>Neboli n\\u00C3\\u00A1jden\\u00C3\\u00AD \\u00C5\\u00BEiadni odv\\u00C3\\u00A1dzatelia.\r\n\r\nJVP: PO jednozna\\u00C4\\u008Dne identifikovan\\u00C3\\u00A1, nedoplatky/preplatky vypo\\u00C4\\u008D\\u00C3\\u00ADtan\\u00C3\\u00A9\r\nEvPohlad: Neidentifikovan\\u00C3\\u00A1 PO: Na z\\u00C3\\u00A1klade vstupn\\u00C3\\u00BDch \\u00C3\\u00BAdajov sa v IS EvPohlad nepodarilo n\\u00C3\\u00A1js\\u00C5\\u00A5 PO, neexistuj\\u00C3\\u00BAce I\\u00C4\\u0152O.</osbStatusDescription>\r\n  </resultInfo>\r\n  <created>2024-07-17T11:44:47.114+02:00</created>\r\n  <formXmlBase64></formXmlBase64>\r\n</ns2:checkArrearsResultServiceRes>\r\n";
    public static final String ZP_OBSAH_SUBORU = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<tn:PlnenieOdvodovejPovinnosti xmlns:tn=\"http://csru.gov.sk/oe_zp_odvodova_povinnost/v1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"OE_CSRU_OdvodovaPovinnostZP_v006.xsd\">\r\n  <tn:OdvodovaPovinnostZP>\r\n    <tn:PO>\r\n      <tn:ObchodneMeno>.. TOPRO s. r. o.</tn:ObchodneMeno>\r\n      <tn:Identifikator>\r\n        <tn:Typ>7</tn:Typ>\r\n        <tn:Hodnota>44162588</tn:Hodnota>\r\n      </tn:Identifikator>\r\n      <tn:Adresa>\r\n        <tn:TypAdresy>100101</tn:TypAdresy>\r\n        <tn:Ulica>WUPPERT\\u00C3\\u0081LSKA</tn:Ulica>\r\n        <tn:Orientacne-SupisneCislo>55</tn:Orientacne-SupisneCislo>\r\n        <tn:Obec>KO\\u00C5\\u00A0ICE</tn:Obec>\r\n        <tn:Psc>04023</tn:Psc>\r\n        <tn:NUTS>SK0425599981</tn:NUTS>\r\n        <tn:Stat>703</tn:Stat>\r\n      </tn:Adresa>\r\n    </tn:PO>\r\n    <tn:Evidencia>\r\n      <tn:SplnenaOdvodovaPovinnost>N</tn:SplnenaOdvodovaPovinnost>\r\n    </tn:Evidencia>\r\n    <tn:ZP>D\\u00C3\\u201DVERA zdravotn\\u00C3\\u00A1 pois\\u00C5\\u00A5ov\\u00C5\\u02C6a</tn:ZP>\r\n    <tn:DatZiad>2024-07-17</tn:DatZiad>\r\n    <tn:Datum>2024-07-17</tn:Datum>\r\n    <tn:VysledokSpracovaniaStav>0</tn:VysledokSpracovaniaStav>\r\n    <tn:JednacieCisloZP>ODVA185591989C34</tn:JednacieCisloZP>\r\n    <tn:ErrorCode>0</tn:ErrorCode>\r\n  </tn:OdvodovaPovinnostZP>\r\n  <tn:OdvodovaPovinnostZP>\r\n    <tn:PO>\r\n      <tn:ObchodneMeno>.. TOPRO s. r. o.</tn:ObchodneMeno>\r\n      <tn:Identifikator>\r\n        <tn:Typ>7</tn:Typ>\r\n        <tn:Hodnota>44162588</tn:Hodnota>\r\n      </tn:Identifikator>\r\n      <tn:Adresa>\r\n        <tn:TypAdresy>100101</tn:TypAdresy>\r\n        <tn:Ulica>WUPPERT\\u00C3\\u0081LSKA</tn:Ulica>\r\n        <tn:Orientacne-SupisneCislo>55</tn:Orientacne-SupisneCislo>\r\n        <tn:Obec>KO\\u00C5\\u00A0ICE-S\\u00C3\\u008DDLISKO KVP</tn:Obec>\r\n        <tn:Psc>04023</tn:Psc>\r\n        <tn:NUTS>SK042</tn:NUTS>\r\n        <tn:Stat>703</tn:Stat>\r\n      </tn:Adresa>\r\n    </tn:PO>\r\n    <tn:Evidencia>\r\n      <tn:SplnenaOdvodovaPovinnost>N</tn:SplnenaOdvodovaPovinnost>\r\n    </tn:Evidencia>\r\n    <tn:ZP>V\\u00C5\\u00A1ZP</tn:ZP>\r\n    <tn:DatZiad>2024-07-17</tn:DatZiad>\r\n    <tn:Datum>2024-07-17</tn:Datum>\r\n    <tn:VysledokSpracovaniaStav>0</tn:VysledokSpracovaniaStav>\r\n    <tn:JednacieCisloZP>1901542</tn:JednacieCisloZP>\r\n    <tn:VybavujeOsobaZP>vszp_data@vszp.sk</tn:VybavujeOsobaZP>\r\n    <tn:VybavujeEmailZP>vszp_data@vszp.sk</tn:VybavujeEmailZP>\r\n    <tn:ErrorCode>0</tn:ErrorCode>\r\n  </tn:OdvodovaPovinnostZP>\r\n  <tn:OdvodovaPovinnostZP>\r\n    <tn:ZP>UZP</tn:ZP>\r\n    <tn:DatZiad>2023-10-10</tn:DatZiad>\r\n    <tn:Datum>2024-07-17</tn:Datum>\r\n    <tn:VysledokSpracovaniaStav>1</tn:VysledokSpracovaniaStav>\r\n    <tn:JednacieCisloZP>ODP1644258</tn:JednacieCisloZP>\r\n    <tn:ErrorCode>0</tn:ErrorCode>\r\n  </tn:OdvodovaPovinnostZP>\r\n</tn:PlnenieOdvodovejPovinnosti>\r\n";

    private static final String FS_DATUM_NEDOPLATKU = "2024-06-30";
    private static final String ICO = "44162588";
    private static final String NAZOV_SPOLOCNOSTI = "..TOPRO s.r.o.";
    private static final SimpleDateFormat DATE_FORMATTER = new SimpleDateFormat("yyyy-MM-dd");
    private static final Date CURRENT_DATE = new Date();

    @MockBean
    private CsruEndpoint csruEndpoint;

    @MockBean
    private SftpService sftpService;

    @Autowired
    private NedoplatkyController nedoplatkyController;

    @Autowired
    private NedoplatkyTimer nedoplatkyTimer;

    @Autowired
    private SpStavZiadostRepository spStavZiadostRepository;

    @Autowired
    private ZpStavZiadostRepository zpStavZiadostRepository;

    @Autowired
    private SetDlzniciRepository setDlzniciRepository;

    @Autowired
    private SetDlzniciObdobieRepository setDlzniciObdobieRepository;

    @Autowired
    private SetDlzniciRefreshRepository setDlzniciRefreshRepository;

    @Autowired
    private FsOsobaZaznamRepository fsOsobaZaznamRepository;

    @Autowired
    private UrsoSubjectStackRepository ursoSubjectStackRepository;

    @Autowired
    private SpOsobaZaznamRepository spOsobaZaznamRepository;

    @Autowired
    private ZpOsobaZaznamRepository zpOsobaZaznamRepository;

    @Autowired
    private UrsoSubjectUpdateTimer ursoSubjectUpdateTimer;

    @Value("${csru.zp.vybavuje-osoba}")
    private String zpVybavujeOsoba;

    @Value("${csru.zp.vybavuje-email}")
    private String zpVybavujeEmail;

    @Value("${csru.zp.vybavuje-telefon}")
    private String zpVybavujeTelefon;

    private void testNedoplatokFs(Nedoplatok nedoplatok, CsruNedoplatokChybovyKodEnum chybovyKodEnum,
                                  CsruNedoplatokEnum nedoplatokEnum, String datumNedoplatku,
                                  CsruDruhDaneAleboPohladavkyEnum druhPohladavkyEnum) {
        Assertions.assertEquals(chybovyKodEnum, nedoplatok.getChybovyKod());
        Assertions.assertEquals(nedoplatokEnum, nedoplatok.getNedoplatok());
        Assertions.assertEquals(LocalDate.parse(datumNedoplatku), nedoplatok.getDatumNedoplatku());
        Assertions.assertEquals(druhPohladavkyEnum, nedoplatok.getDruhDaneAleboPohladavky());
    }

    private void testVysledokKontrolyZp(ZpVysledokKontroly vysledokKontroly, ZpNedoplatok nedoplatokEnum, ZpPoistovna poistovnaEnum,
                                        CsruNavratovyKodOperacie chybovyKodEnum, ZpPopisKoduVysledkuSpracovania vysledokSpracovaniaEnum) {
        Assertions.assertEquals(nedoplatokEnum, vysledokKontroly.getNedoplatok());
        Assertions.assertEquals(poistovnaEnum, vysledokKontroly.getPoistovna());
        Assertions.assertEquals(chybovyKodEnum, vysledokKontroly.getNavratovyKod());
        Assertions.assertEquals(vysledokSpracovaniaEnum, vysledokKontroly.getVysledokSpracovania());
    }

    @Test
    @Transactional
    public void nedoplatkyFsTest() throws IOException, ParserConfigurationException, SAXException {
        GetConsolidatedDataResponseCType mockedFsResponse = XmlUtils.parseXml(FS, GetConsolidatedDataResponseCType.class);
        Mockito.when(csruEndpoint.sendGetConsolidatedDataSyncRequest(any())).thenReturn(mockedFsResponse);

        SubjektNedoplatokVstupnyDetail vstup = new SubjektNedoplatokVstupnyDetail();
        vstup.setIco(ICO);
        ResponseEntity<SubjektVystupnyDetail> response = nedoplatkyController.nedoplatkyInstituciaPost(InstituciaEnum.FS, vstup);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());

        SubjektVystupnyDetail body = response.getBody();
        Assertions.assertNotNull(body);
        Assertions.assertEquals(CsruNavratovyKodOperacieEnum.OK, body.getNavratovyKodOperacie());
        Assertions.assertEquals(true, body.getMaNedoplatok());

        testNedoplatokFs(body.getNedoplatky().get(0), CsruNedoplatokChybovyKodEnum.OK, CsruNedoplatokEnum.MA_NEDOPLATOK,
                FS_DATUM_NEDOPLATKU, CsruDruhDaneAleboPohladavkyEnum.NDS);
        testNedoplatokFs(body.getNedoplatky().get(1), CsruNedoplatokChybovyKodEnum.OK, CsruNedoplatokEnum.NEMA_NEDOPLATOK,
                FS_DATUM_NEDOPLATKU, CsruDruhDaneAleboPohladavkyEnum.SPD);
        testNedoplatokFs(body.getNedoplatky().get(2), CsruNedoplatokChybovyKodEnum.OK, CsruNedoplatokEnum.NEMA_NEDOPLATOK,
                FS_DATUM_NEDOPLATKU, CsruDruhDaneAleboPohladavkyEnum.COL);
    }

    @Test
    @Transactional
    public void nedpolatkySPTest() throws IOException, ParserConfigurationException, SAXException {
        sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetConsolidatedDataResponseCType mockSpResponse =
                XmlUtils.parseXml(SP, sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetConsolidatedDataResponseCType.class);
        Mockito.when(csruEndpoint.sendGetConsolidatedDataAsyncRequest(any())).thenReturn(mockSpResponse);

        SubjektNedoplatokVstupnyDetail vstup = new SubjektNedoplatokVstupnyDetail();
        vstup.setIco(ICO);
        vstup.setNazovSpolocnosti(NAZOV_SPOLOCNOSTI);
        ResponseEntity<SubjektVystupnyDetail> response = nedoplatkyController.nedoplatkyInstituciaPost(InstituciaEnum.SP, vstup);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());

        SubjektVystupnyDetail body = response.getBody();
        Assertions.assertNotNull(body);
        Assertions.assertEquals(CsruNavratovyKodOperacieEnum.OK, body.getNavratovyKodOperacie());
        Assertions.assertEquals(CsruStavZiadostiEnum.PREBIEHA_SPRACOVANIE, body.getStavZiadosti());
    }

    @Test
    @Transactional
    public void nedpolatkySPUpdateStavZiadostiTest() throws IOException, ParserConfigurationException, SAXException {
        nedpolatkySPTest();
        GetStatusResponseCType mockSpResponse = XmlUtils.parseXml(SP_STAV_ZIADOSTI, GetStatusResponseCType.class);
        Mockito.when(csruEndpoint.sendGetStatusRequest(any())).thenReturn(mockSpResponse);
        Mockito.when(sftpService.loadFileContent(anyString(), anyInt(), anyString(), anyString(), anyBoolean(), anyString(), anyInt(), anyString()))
                .thenReturn(SP_OBSAH_SUBORU);

        nedoplatkyTimer.updateStavyZiadostiSp();
        List<SpStavZiadost> stavZiadostList = spStavZiadostRepository.findAll();
        Assertions.assertEquals(1, stavZiadostList.size());

        SpStavZiadost stavZiadost = stavZiadostList.get(0);
        Assertions.assertEquals(CsruNavratovyKodOperacie.OK, stavZiadost.getNavratovyKodOperacie());
        Assertions.assertEquals(true, stavZiadost.getMaNedoplatok());
        Assertions.assertEquals(CsruStavZiadosti.SPRACOVANIE_USPESNE_UKONCENE, stavZiadost.getStav());

        SpOsobaZaznam osobaZaznam = stavZiadost.getOsobaZaznam();
        Assertions.assertNotNull(osobaZaznam);
        Assertions.assertEquals(ICO, osobaZaznam.getIco());
        Assertions.assertEquals(NAZOV_SPOLOCNOSTI, osobaZaznam.getNazovSpolocnosti());

        SpVystupnySubor vystupnySubor = stavZiadost.getVystupnySubor();
        Assertions.assertNotNull(vystupnySubor);
        Assertions.assertNotNull(vystupnySubor.getPath());

        SpVysledokKontroly vysledokKontroly = stavZiadost.getVysledokKontroly();
        Assertions.assertNotNull(vysledokKontroly);
        Assertions.assertNotNull(vysledokKontroly.getOsbStatusText());
        Assertions.assertEquals(SpNedoplatok.MA_NEDOPLATOK, vysledokKontroly.getNedoplatok());
    }

    @Test
    @Transactional
    public void nedpolatkyZPTest() throws IOException, ParserConfigurationException, SAXException {
        sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetConsolidatedDataResponseCType mockSpResponse =
                XmlUtils.parseXml(ZP, sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetConsolidatedDataResponseCType.class);
        Mockito.when(csruEndpoint.sendGetConsolidatedDataAsyncRequest(any())).thenReturn(mockSpResponse);

        SubjektNedoplatokVstupnyDetail vstup = new SubjektNedoplatokVstupnyDetail();
        vstup.setIco(ICO);
        vstup.setNazovSpolocnosti(NAZOV_SPOLOCNOSTI);
        ResponseEntity<SubjektVystupnyDetail> response = nedoplatkyController.nedoplatkyInstituciaPost(InstituciaEnum.ZP, vstup);

        Assertions.assertNotNull(response);
        Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());

        SubjektVystupnyDetail body = response.getBody();
        Assertions.assertNotNull(body);
        Assertions.assertEquals(CsruNavratovyKodOperacieEnum.OK, body.getNavratovyKodOperacie());
        Assertions.assertEquals(CsruStavZiadostiEnum.PREBIEHA_SPRACOVANIE, body.getStavZiadosti());
    }

    @Test
    @Transactional
    public void nedpolatkyZPUpdateStavZiadostiTest() throws IOException, ParserConfigurationException, SAXException {
        nedpolatkyZPTest();
        GetStatusResponseCType mockSpResponse = XmlUtils.parseXml(ZP_STAV_ZIADOSTI, GetStatusResponseCType.class);
        Mockito.when(csruEndpoint.sendGetStatusRequest(any())).thenReturn(mockSpResponse);
        Mockito.when(sftpService.loadFileContent(anyString(), anyInt(), anyString(), anyString(), anyBoolean(), anyString(), anyInt(), anyString()))
                .thenReturn(ZP_OBSAH_SUBORU);

        nedoplatkyTimer.updateStavyZiadostiZp();
        List<ZpStavZiadost> stavZiadostList = zpStavZiadostRepository.findAll();
        Assertions.assertEquals(1, stavZiadostList.size());

        ZpStavZiadost stavZiadost = stavZiadostList.get(0);
        Assertions.assertEquals(CsruNavratovyKodOperacie.OK, stavZiadost.getNavratovyKodOperacie());
        Assertions.assertEquals(true, stavZiadost.getMaNedoplatok());
        Assertions.assertEquals(CsruStavZiadosti.SPRACOVANIE_USPESNE_UKONCENE, stavZiadost.getStav());

        ZpOsobaZaznam osobaZaznam = stavZiadost.getOsobaZaznam();
        Assertions.assertNotNull(osobaZaznam);
        Assertions.assertEquals(ICO, osobaZaznam.getIco());
        Assertions.assertEquals(zpVybavujeOsoba, osobaZaznam.getVybavujeOsoba());
        Assertions.assertEquals(zpVybavujeTelefon, osobaZaznam.getVybavujeTelefon());
        Assertions.assertEquals(zpVybavujeEmail, osobaZaznam.getVybavujeEmail());

        ZpVystupnySubor vystupnySubor = stavZiadost.getVystupnySubor();
        Assertions.assertNotNull(vystupnySubor);
        Assertions.assertNotNull(vystupnySubor.getPath());

        List<ZpVysledokKontroly> vysledokKontrolyList = stavZiadost.getVysledkyKontrol();
        Assertions.assertNotNull(vysledokKontrolyList);
        Assertions.assertEquals(3, vysledokKontrolyList.size());

        testVysledokKontrolyZp(vysledokKontrolyList.get(0), ZpNedoplatok.N, ZpPoistovna.NEZNAMA, CsruNavratovyKodOperacie.OK,
                ZpPopisKoduVysledkuSpracovania.ZASLANE_UDAJE_OD_ZP);
        testVysledokKontrolyZp(vysledokKontrolyList.get(1), ZpNedoplatok.N, ZpPoistovna.NEZNAMA, CsruNavratovyKodOperacie.OK,
                ZpPopisKoduVysledkuSpracovania.ZASLANE_UDAJE_OD_ZP);
        testVysledokKontrolyZp(vysledokKontrolyList.get(2), ZpNedoplatok.NEZNAMY, ZpPoistovna.UNION, CsruNavratovyKodOperacie.OK,
                ZpPopisKoduVysledkuSpracovania.NIE_JE_EVIDOVANY);
    }

    @Test
    @Transactional
    public void updateFsAndSendSpZpRequestsFsMaNedoplatokTest() throws IOException, ParserConfigurationException, SAXException {
        SetDlznici setDlznici = new SetDlznici();
        setDlznici.setId(1L);
        setDlznici.setIco(ICO);
        setDlznici.setNazov(NAZOV_SPOLOCNOSTI);
        setDlznici.setSync(false);
        setDlzniciRepository.save(setDlznici);

        nedoplatkyFsTest();
        ursoSubjectUpdateTimer.updateFsAndSendSpZpRequests();

        SetDlznici dlznikResult = setDlzniciRepository.findAll().get(0);
        Assertions.assertEquals(setDlznici.getId(), dlznikResult.getId());
        Assertions.assertEquals(setDlznici.getIco(), dlznikResult.getIco());
        Assertions.assertEquals(setDlznici.getNazov(), dlznikResult.getNazov());
        Assertions.assertEquals(setDlznici.getSync(), dlznikResult.getSync());

        SetDlzniciRefresh dlznikRefreshResult = setDlzniciRefreshRepository.findAll().get(0);
        Assertions.assertNotNull(dlznikRefreshResult.getDateRefresh());
        Assertions.assertEquals(1, dlznikRefreshResult.getRecordModified());
        Assertions.assertEquals((short) 3, dlznikRefreshResult.getSource());
        Assertions.assertEquals(dlznikResult.getSetDlzniciRefresh().getId(), dlznikRefreshResult.getId());

        SetDlzniciObdobie dlznikObdobieResult = setDlzniciObdobieRepository.findAll().get(0);
        Assertions.assertEquals((short) 3, dlznikObdobieResult.getZdroj());
        Assertions.assertEquals(DATE_FORMATTER.format(CURRENT_DATE), DATE_FORMATTER.format(dlznikObdobieResult.getObdobieOd()));
        Assertions.assertNull(dlznikObdobieResult.getObdobieDo());
        Assertions.assertEquals(setDlznici.getId(), dlznikObdobieResult.getSetDlznici().getId());
    }

    @Test
    @Transactional
    public void updateFsAndSendSpZpRequestsFsUzNemaNedoplatokTest() throws IOException, ParserConfigurationException, SAXException {
        SetDlznici setDlznici = new SetDlznici();
        setDlznici.setId(1L);
        setDlznici.setIco(ICO);
        setDlznici.setNazov(NAZOV_SPOLOCNOSTI);
        setDlznici.setSync(false);
        setDlznici = setDlzniciRepository.save(setDlznici);

        SetDlzniciObdobie setDlzniciObdobie = new SetDlzniciObdobie();
        setDlzniciObdobie.setId(1L);
        setDlzniciObdobie.setSetDlznici(setDlznici);
        setDlzniciObdobie.setZdroj((short) 3);
        setDlzniciObdobie.setObdobieOd(new Date());
        setDlzniciObdobie = setDlzniciObdobieRepository.save(setDlzniciObdobie);

        setDlznici.getSetDlzniciObdobieList().add(setDlzniciObdobie);
        setDlznici = setDlzniciRepository.save(setDlznici);

        nedoplatkyFsTest();
        FsOsobaZaznam osoba = fsOsobaZaznamRepository.findAll().get(0);
        osoba.setMaNedoplatok(false);
        fsOsobaZaznamRepository.save(osoba);

        ursoSubjectUpdateTimer.updateFsAndSendSpZpRequests();

        SetDlznici dlznikResult = setDlzniciRepository.findAll().get(0);
        Assertions.assertEquals(setDlznici.getId(), dlznikResult.getId());
        Assertions.assertEquals(setDlznici.getIco(), dlznikResult.getIco());
        Assertions.assertEquals(setDlznici.getNazov(), dlznikResult.getNazov());
        Assertions.assertEquals(setDlznici.getSync(), dlznikResult.getSync());

        SetDlzniciRefresh dlznikRefreshResult = setDlzniciRefreshRepository.findAll().get(0);
        Assertions.assertNotNull(dlznikRefreshResult.getDateRefresh());
        Assertions.assertEquals(1, dlznikRefreshResult.getRecordModified());
        Assertions.assertEquals((short) 3, dlznikRefreshResult.getSource());
        Assertions.assertEquals(dlznikResult.getSetDlzniciRefresh().getId(), dlznikRefreshResult.getId());

        SetDlzniciObdobie dlznikObdobieResult = setDlzniciObdobieRepository.findAll().get(0);
        Assertions.assertEquals((short) 3, dlznikObdobieResult.getZdroj());
        Assertions.assertEquals(setDlzniciObdobie.getObdobieOd(), dlznikObdobieResult.getObdobieOd());
        Assertions.assertEquals(DATE_FORMATTER.format(CURRENT_DATE), DATE_FORMATTER.format(dlznikObdobieResult.getObdobieDo()));
        Assertions.assertEquals(setDlznici.getId(), dlznikObdobieResult.getSetDlznici().getId());
    }

    @Test
    @Transactional
    public void nedoplatkyRequestSpTest() throws IOException, ParserConfigurationException, SAXException {
        sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetConsolidatedDataResponseCType mockSpResponse =
                XmlUtils.parseXml(SP, sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetConsolidatedDataResponseCType.class);
        Mockito.when(csruEndpoint.sendGetConsolidatedDataAsyncRequest(any())).thenReturn(mockSpResponse);

        SetDlznici setDlznici = new SetDlznici();
        setDlznici.setId(1L);
        setDlznici.setIco(ICO);
        setDlznici.setNazov(NAZOV_SPOLOCNOSTI);
        setDlznici.setSync(false);
        setDlznici = setDlzniciRepository.save(setDlznici);

        ursoSubjectUpdateTimer.nedoplatkyRequestSp(setDlznici);

        UrsoSubjectStack ursoSubjectStack = ursoSubjectStackRepository.findAll().get(0);
        Assertions.assertEquals(setDlznici, ursoSubjectStack.getSetDlznici());
        Assertions.assertEquals(UrsoSubjectStav.PREBIEHA, ursoSubjectStack.getUrsoSubjectStav());
        Assertions.assertEquals(UrsoNedoplatokTyp.SP, ursoSubjectStack.getUrsoNedoplatokTyp());
        Assertions.assertEquals(DATE_FORMATTER.format(CURRENT_DATE), DATE_FORMATTER.format(ursoSubjectStack.getCasVytvorenia()));
    }

    @Test
    @Transactional
    public void nedoplatkyRequestZpTest() throws IOException, ParserConfigurationException, SAXException {
        sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetConsolidatedDataResponseCType mockSpResponse =
                XmlUtils.parseXml(ZP, sk.is.urso.model.csru.api.async.GetConsolidatedDataServiceAsync.GetConsolidatedDataResponseCType.class);
        mockSpResponse.setRequestId(mockSpResponse.getRequestId());
        Mockito.when(csruEndpoint.sendGetConsolidatedDataAsyncRequest(any())).thenReturn(mockSpResponse);

        SetDlznici setDlznici = new SetDlznici();
        setDlznici.setId(1L);
        setDlznici.setIco(ICO);
        setDlznici.setNazov(NAZOV_SPOLOCNOSTI);
        setDlznici.setSync(false);
        setDlznici = setDlzniciRepository.save(setDlznici);

        ursoSubjectUpdateTimer.nedoplatkyRequestZp(setDlznici);

        UrsoSubjectStack ursoSubjectStack = ursoSubjectStackRepository.findAll().get(0);
        Assertions.assertEquals(setDlznici, ursoSubjectStack.getSetDlznici());
        Assertions.assertEquals(UrsoSubjectStav.PREBIEHA, ursoSubjectStack.getUrsoSubjectStav());
        Assertions.assertEquals(UrsoNedoplatokTyp.ZP, ursoSubjectStack.getUrsoNedoplatokTyp());
        Assertions.assertEquals(DATE_FORMATTER.format(CURRENT_DATE), DATE_FORMATTER.format(ursoSubjectStack.getCasVytvorenia()));
    }

    @Test
    @Transactional
    public void nedoplatkyResponseSpMaNedoplatokTest() throws IOException, ParserConfigurationException, SAXException {
        nedoplatkyRequestSpTest();

        GetStatusResponseCType mockSpResponse = XmlUtils.parseXml(SP_STAV_ZIADOSTI, GetStatusResponseCType.class);
        Mockito.when(csruEndpoint.sendGetStatusRequest(any())).thenReturn(mockSpResponse);
        Mockito.when(sftpService.loadFileContent(anyString(), anyInt(), anyString(), anyString(), anyBoolean(), anyString(), anyInt(), anyString()))
                .thenReturn(SP_OBSAH_SUBORU);

        nedoplatkyTimer.updateStavyZiadostiSp();
        SpOsobaZaznam osoba = spOsobaZaznamRepository.findAll().get(0);
        osoba.setStavZiadosti(new ArrayList<>());
        osoba.getStavZiadosti().add(spStavZiadostRepository.findAll().get(0));

        ursoSubjectUpdateTimer.nedoplatkyResponseSp();

        SetDlzniciRefresh dlznikRefreshResult = setDlzniciRefreshRepository.findAll().get(0);
        Assertions.assertNotNull(dlznikRefreshResult.getDateRefresh());
        Assertions.assertEquals(1, dlznikRefreshResult.getRecordModified());
        Assertions.assertEquals((short) 1, dlznikRefreshResult.getSource());

        SetDlzniciObdobie dlznikObdobieResult = setDlzniciObdobieRepository.findAll().get(0);
        Assertions.assertEquals((short) 1, dlznikObdobieResult.getZdroj());
        Assertions.assertEquals(DATE_FORMATTER.format(CURRENT_DATE), DATE_FORMATTER.format(dlznikObdobieResult.getObdobieOd()));
        Assertions.assertNull(dlznikObdobieResult.getObdobieDo());
    }

    @Test
    @Transactional
    public void nedoplatkyResponseSpUzNemaNedoplatokTest() throws IOException, ParserConfigurationException, SAXException {
        nedoplatkyRequestSpTest();

        SetDlznici setDlznici = setDlzniciRepository.findAll().get(0);

        SetDlzniciObdobie setDlzniciObdobie = new SetDlzniciObdobie();
        setDlzniciObdobie.setId(1L);
        setDlzniciObdobie.setSetDlznici(setDlznici);
        setDlzniciObdobie.setZdroj((short) 1);
        setDlzniciObdobie.setObdobieOd(new Date());
        setDlzniciObdobie = setDlzniciObdobieRepository.save(setDlzniciObdobie);

        setDlznici.getSetDlzniciObdobieList().add(setDlzniciObdobie);
        setDlznici = setDlzniciRepository.save(setDlznici);


        GetStatusResponseCType mockSpResponse = XmlUtils.parseXml(SP_STAV_ZIADOSTI, GetStatusResponseCType.class);
        Mockito.when(csruEndpoint.sendGetStatusRequest(any())).thenReturn(mockSpResponse);
        Mockito.when(sftpService.loadFileContent(anyString(), anyInt(), anyString(), anyString(), anyBoolean(), anyString(), anyInt(), anyString()))
                .thenReturn(SP_OBSAH_SUBORU);

        nedoplatkyTimer.updateStavyZiadostiSp();

        SpStavZiadost stavZiadost = spStavZiadostRepository.findAll().get(0);
        stavZiadost.setMaNedoplatok(false);

        SpOsobaZaznam osoba = spOsobaZaznamRepository.findAll().get(0);
        osoba.setStavZiadosti(new ArrayList<>());
        osoba.getStavZiadosti().add(stavZiadost);

        ursoSubjectUpdateTimer.nedoplatkyResponseSp();

        SetDlzniciRefresh dlznikRefreshResult = setDlzniciRefreshRepository.findAll().get(0);
        Assertions.assertNotNull(dlznikRefreshResult.getDateRefresh());
        Assertions.assertEquals(1, dlznikRefreshResult.getRecordModified());
        Assertions.assertEquals((short) 1, dlznikRefreshResult.getSource());

        SetDlzniciObdobie dlznikObdobieResult = setDlzniciObdobieRepository.findAll().get(0);
        Assertions.assertEquals((short) 1, dlznikObdobieResult.getZdroj());
        Assertions.assertEquals(setDlzniciObdobie.getObdobieOd(), dlznikObdobieResult.getObdobieOd());
        Assertions.assertEquals(DATE_FORMATTER.format(CURRENT_DATE), DATE_FORMATTER.format(dlznikObdobieResult.getObdobieDo()));
    }

    @Test
    @Transactional
    public void nedoplatkyResponseZpMaNedoplatokTest() throws IOException, ParserConfigurationException, SAXException {
        nedoplatkyRequestZpTest();

        GetStatusResponseCType mockSpResponse = XmlUtils.parseXml(ZP_STAV_ZIADOSTI, GetStatusResponseCType.class);
        Mockito.when(csruEndpoint.sendGetStatusRequest(any())).thenReturn(mockSpResponse);
        Mockito.when(sftpService.loadFileContent(anyString(), anyInt(), anyString(), anyString(), anyBoolean(), anyString(), anyInt(), anyString()))
                .thenReturn(ZP_OBSAH_SUBORU);

        nedoplatkyTimer.updateStavyZiadostiZp();
        ZpOsobaZaznam osoba = zpOsobaZaznamRepository.findAll().get(0);
        osoba.setStavZiadostList(new ArrayList<>());
        osoba.getStavZiadostList().add(zpStavZiadostRepository.findAll().get(0));

        ursoSubjectUpdateTimer.nedoplatkyResponseZp();

        SetDlzniciRefresh dlznikRefreshResult = setDlzniciRefreshRepository.findAll().get(0);
        Assertions.assertNotNull(dlznikRefreshResult.getDateRefresh());
        Assertions.assertEquals(1, dlznikRefreshResult.getRecordModified());
        Assertions.assertEquals((short) 2, dlznikRefreshResult.getSource());

        SetDlzniciObdobie dlznikObdobieResult = setDlzniciObdobieRepository.findAll().get(0);
        Assertions.assertEquals((short) 2, dlznikObdobieResult.getZdroj());
        Assertions.assertEquals(DATE_FORMATTER.format(CURRENT_DATE), DATE_FORMATTER.format(dlznikObdobieResult.getObdobieOd()));
        Assertions.assertNull(dlznikObdobieResult.getObdobieDo());
    }

    @Test
    @Transactional
    public void nedoplatkyResponseZpUzNemaNedoplatokTest() throws IOException, ParserConfigurationException, SAXException {
        nedoplatkyRequestZpTest();

        SetDlznici setDlznici = setDlzniciRepository.findAll().get(0);

        SetDlzniciObdobie setDlzniciObdobie = new SetDlzniciObdobie();
        setDlzniciObdobie.setId(1L);
        setDlzniciObdobie.setSetDlznici(setDlznici);
        setDlzniciObdobie.setZdroj((short) 2);
        setDlzniciObdobie.setObdobieOd(new Date());
        setDlzniciObdobie = setDlzniciObdobieRepository.save(setDlzniciObdobie);

        setDlznici.getSetDlzniciObdobieList().add(setDlzniciObdobie);
        setDlznici = setDlzniciRepository.save(setDlznici);


        GetStatusResponseCType mockSpResponse = XmlUtils.parseXml(ZP_STAV_ZIADOSTI, GetStatusResponseCType.class);
        Mockito.when(csruEndpoint.sendGetStatusRequest(any())).thenReturn(mockSpResponse);
        Mockito.when(sftpService.loadFileContent(anyString(), anyInt(), anyString(), anyString(), anyBoolean(), anyString(), anyInt(), anyString()))
                .thenReturn(ZP_OBSAH_SUBORU);

        nedoplatkyTimer.updateStavyZiadostiZp();

        ZpStavZiadost stavZiadost = zpStavZiadostRepository.findAll().get(0);
        stavZiadost.setMaNedoplatok(false);

        ZpOsobaZaznam osoba = zpOsobaZaznamRepository.findAll().get(0);
        osoba.setStavZiadostList(new ArrayList<>());
        osoba.getStavZiadostList().add(stavZiadost);

        ursoSubjectUpdateTimer.nedoplatkyResponseZp();

        SetDlzniciRefresh dlznikRefreshResult = setDlzniciRefreshRepository.findAll().get(0);
        Assertions.assertNotNull(dlznikRefreshResult.getDateRefresh());
        Assertions.assertEquals(1, dlznikRefreshResult.getRecordModified());
        Assertions.assertEquals((short) 2, dlznikRefreshResult.getSource());

        SetDlzniciObdobie dlznikObdobieResult = setDlzniciObdobieRepository.findAll().get(0);
        Assertions.assertEquals((short) 2, dlznikObdobieResult.getZdroj());
        Assertions.assertEquals(setDlzniciObdobie.getObdobieOd(), dlznikObdobieResult.getObdobieOd());
        Assertions.assertEquals(DATE_FORMATTER.format(CURRENT_DATE), DATE_FORMATTER.format(dlznikObdobieResult.getObdobieDo()));
    }
}
