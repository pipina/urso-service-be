/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.is.urso.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;
import sk.is.urso.rest.model.InstituciaEnum;
import sk.is.urso.rest.model.SubjektNedoplatokVstupnyDetail;
import sk.is.urso.rest.model.SubjektVystupnyDetail;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-26T09:59:21.066787900+02:00[Europe/Berlin]")
@Validated
@Tag(name = "nedoplatky", description = "the nedoplatky API")
public interface NedoplatkyApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /nedoplatky/{institucia}
     * Služba vyhladá či má subjekt nedoplatky vo finančnej správe / v zdravotných poisťovniach / v sociálnej poisťovni
     *
     * @param institucia                     typ inštitúcie (FS - finančná správa, ZP - zdravotné poisťovne, SP - sociálna poisťovňa) (required)
     * @param subjektNedoplatokVstupnyDetail údaje subjektu, podľa ktorých sa zisťuje či má nedoplatok (pre fyzickú osobu rodné číslo, pre právnicku osobu IČO) (optional)
     * @return informácia o tom či má subjekt nedoplatok v danej inštitúcii  (status code 200)
     * or Nesprávny vstup (status code 400)
     * or Žiadateľ služby nie je autorizovaný (status code 401)
     * or Operácia zamietnutá (status code 403)
     * or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
            operationId = "nedoplatkyInstituciaPost",
            summary = "Služba vyhladá či daný subjekt má nedoplatky vo FS (finančná správa)/ ZP (zdravotné poisťovne)/ PS (sociálna poisťovňa)",
            tags = {"NedoplatkyController"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = SubjektVystupnyDetail.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            },
            security = {
                    @SecurityRequirement(name = "BearerAuth")
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/nedoplatky/{institucia}",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<SubjektVystupnyDetail> nedoplatkyInstituciaPost(
            @Parameter(name = "institucia", description = "", required = true) @PathVariable("institucia") InstituciaEnum institucia,
            @Parameter(name = "SubjektNedoplatokVstupnyDetail", description = "") @Valid @RequestBody(required = false) SubjektNedoplatokVstupnyDetail subjektNedoplatokVstupnyDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"nedoplatok\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
