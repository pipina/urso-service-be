/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.is.urso.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;
import sk.is.urso.rest.model.HodnotaCiselnikaInputDetail;
import sk.is.urso.rest.model.HodnotaCiselnikaList;
import sk.is.urso.rest.model.HodnotaCiselnikaListRequest;
import sk.is.urso.rest.model.HodnotaCiselnikaOutputDetail;
import sk.is.urso.rest.model.HodnotaCiselnikaShortDetail;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-29T11:27:41.522351500+02:00[Europe/Bratislava]")
@Validated
@Tag(name = "HodnotaCiselnika", description = "the HodnotaCiselnika API")
public interface HodnotaCiselnikaApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /hodnotaCiselnika
     * Služba pridá novú hodnotu do číselníka a vráti detail
     *
     * @param hodnotaCiselnikaInputDetail údaje pridávanej hodnoty číselníka (optional)
     * @return Hodnota číselníka bola úspešne pridaná (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam s daným id číselníka neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "createHodnotaCiselnika",
        tags = { "HodnotaCiselnika" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Hodnota číselníka bola úspešne pridaná", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HodnotaCiselnikaOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam s daným id číselníka neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/hodnotaCiselnika",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<HodnotaCiselnikaOutputDetail> createHodnotaCiselnika(
        @Parameter(name = "HodnotaCiselnikaInputDetail", description = "") @Valid @RequestBody(required = false) HodnotaCiselnikaInputDetail hodnotaCiselnikaInputDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"kodPolozky\" : \"kodPolozky\", \"platnostDo\" : \"2000-01-23\", \"nadradenaHodnotaCiselnikaKodPolozky\" : \"nadradenaHodnotaCiselnikaKodPolozky\", \"poradie\" : 6, \"platnostOd\" : \"2000-01-23\", \"id\" : 0, \"kodCiselnika\" : \"kodCiselnika\", \"nazovPolozky\" : \"nazovPolozky\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /hodnotaCiselnika/{id}
     * Služba odstráni hodnotu číselníka podľa identifikátora
     *
     * @param id identifikátor hodnoty číselníka (required)
     * @return Hodnota bola úspešne odstránená. (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam s daným kódom číselníka neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "deleteHodnotaCiselnika",
        tags = { "HodnotaCiselnika" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Hodnota bola úspešne odstránená."),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam s daným kódom číselníka neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/hodnotaCiselnika/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteHodnotaCiselnika(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /hodnotaCiselnika/filter
     * Služba vráti zoznam hodnôt číselníka podľa filtra
     *
     * @param hodnotaCiselnikaListRequest filter (optional)
     * @return Zoznam hodnôt číselníka (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný. (status code 401)
     *         or Operácia zamietnutá. (status code 403)
     *         or Neočakavaná chyba aplikácie. (status code 200)
     */
    @Operation(
        operationId = "filterHodnotaCiselnika",
        tags = { "HodnotaCiselnika" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Zoznam hodnôt číselníka", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HodnotaCiselnikaList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/hodnotaCiselnika/filter",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<HodnotaCiselnikaList> filterHodnotaCiselnika(
        @Parameter(name = "HodnotaCiselnikaListRequest", description = "") @Valid @RequestBody(required = false) HodnotaCiselnikaListRequest hodnotaCiselnikaListRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"kodPolozky\" : \"kodPolozky\", \"platnostDo\" : \"2000-01-23\", \"poradie\" : 1, \"dodatocnyObsah\" : \"dodatocnyObsah\", \"platnostOd\" : \"2000-01-23\", \"id\" : 6, \"kodCiselnika\" : \"kodCiselnika\", \"nazovPolozky\" : \"nazovPolozky\" }, { \"kodPolozky\" : \"kodPolozky\", \"platnostDo\" : \"2000-01-23\", \"poradie\" : 1, \"dodatocnyObsah\" : \"dodatocnyObsah\", \"platnostOd\" : \"2000-01-23\", \"id\" : 6, \"kodCiselnika\" : \"kodCiselnika\", \"nazovPolozky\" : \"nazovPolozky\" } ], \"total\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /hodnotaCiselnika/{id}
     * Služba vráti hodnotu číselníka podľa identifikátora
     *
     * @param id identifikátor hodnoty číselníka (required)
     * @return Úspešne nájdený a vráteny detail hodnoty číselníka (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam s daným kódom číselníka neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "getHodnotaCiselnika",
        tags = { "HodnotaCiselnika" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne nájdený a vráteny detail hodnoty číselníka", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HodnotaCiselnikaOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam s daným kódom číselníka neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/hodnotaCiselnika/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<HodnotaCiselnikaOutputDetail> getHodnotaCiselnika(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"kodPolozky\" : \"kodPolozky\", \"platnostDo\" : \"2000-01-23\", \"nadradenaHodnotaCiselnikaKodPolozky\" : \"nadradenaHodnotaCiselnikaKodPolozky\", \"poradie\" : 6, \"platnostOd\" : \"2000-01-23\", \"id\" : 0, \"kodCiselnika\" : \"kodCiselnika\", \"nazovPolozky\" : \"nazovPolozky\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /hodnotaCiselnika/simple/{kodCiselnika}
     * Služba vráti zoznam hodnôt daného číselníka - prvých 1000 záznamov.
     *
     * @param kodCiselnika kód číselníka (required)
     * @param search (optional)
     * @return Zoznam hodnôt číselníka (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný. (status code 401)
     *         or Operácia zamietnutá. (status code 403)
     *         or Neočakavaná chyba aplikácie. (status code 200)
     */
    @Operation(
        operationId = "simpleFilterHodnotaCiselnika",
        tags = { "HodnotaCiselnika" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Zoznam hodnôt číselníka", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HodnotaCiselnikaShortDetail.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/hodnotaCiselnika/simple/{kodCiselnika}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<HodnotaCiselnikaShortDetail>> simpleFilterHodnotaCiselnika(
        @Pattern(regexp = "[a-zA-Z0-9]+") @Size(min = 1, max = 100) @Parameter(name = "kodCiselnika", description = "", required = true) @PathVariable("kodCiselnika") String kodCiselnika,
        @Size(max = 256) @Parameter(name = "search", description = "") @Valid @RequestParam(value = "search", required = false) String search
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"kodPolozky\" : \"kodPolozky\", \"id\" : 0, \"nazovPolozky\" : \"nazovPolozky\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * GET /hodnotaCiselnika/additionalInfo/{kodCiselnika}
     * Služba vráti zoznam hodnôt daného číselníka - prvých 1000 záznamov.
     *
     * @param kodCiselnika kód číselníka (required)
     * @param search  (optional)
     * @return Zoznam hodnôt číselníka (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný. (status code 401)
     *         or Operácia zamietnutá. (status code 403)
     *         or Neočakavaná chyba aplikácie. (status code 200)
     */
    @Operation(
            operationId = "additionalInfoFilterHodnotaCiselnika",
            tags = { "HodnotaCiselnika" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Zoznam hodnôt číselníka", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = HodnotaCiselnikaShortDetail.class)))
                    }),
                    @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Operácia zamietnutá.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/hodnotaCiselnika/additionalInfo/{kodCiselnika}",
            produces = { "application/json" }
    )
    default ResponseEntity<List<HodnotaCiselnikaShortDetail>> additionalInfoFilterHodnotaCiselnika(
            @Pattern(regexp = "[a-zA-Z0-9]+") @Size(min = 1, max = 100) @Parameter(name = "kodCiselnika", description = "", required = true) @PathVariable("kodCiselnika") String kodCiselnika,
            @Size(max = 256) @Parameter(name = "search", description = "") @Valid @RequestParam(value = "search", required = false) String search
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"kodPolozky\" : \"kodPolozky\", \"id\" : 0, \"nazovPolozky\" : \"nazovPolozky\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    /**
     * PUT /hodnotaCiselnika/{id}
     * Služba aktualizuje hodnotu číselníka podľa identifikátora a parametrov
     *
     * @param id identifikátor hodnoty číselníka (required)
     * @param hodnotaCiselnikaInputDetail upravené údaje hodnoty číselníka (optional)
     * @return Hodnota bola úspešne aktualizovaná a vrátila detail (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam s daným kódom číselníka neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "updateHodnotaCiselnika",
        tags = { "HodnotaCiselnika" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Hodnota bola úspešne aktualizovaná a vrátila detail", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = HodnotaCiselnikaOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam s daným kódom číselníka neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/hodnotaCiselnika/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<HodnotaCiselnikaOutputDetail> updateHodnotaCiselnika(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id,
        @Parameter(name = "HodnotaCiselnikaInputDetail", description = "") @Valid @RequestBody(required = false) HodnotaCiselnikaInputDetail hodnotaCiselnikaInputDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"kodPolozky\" : \"kodPolozky\", \"platnostDo\" : \"2000-01-23\", \"nadradenaHodnotaCiselnikaKodPolozky\" : \"nadradenaHodnotaCiselnikaKodPolozky\", \"poradie\" : 6, \"platnostOd\" : \"2000-01-23\", \"id\" : 0, \"kodCiselnika\" : \"kodCiselnika\", \"nazovPolozky\" : \"nazovPolozky\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
