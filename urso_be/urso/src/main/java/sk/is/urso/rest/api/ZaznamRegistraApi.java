/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.is.urso.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.context.request.NativeWebRequest;
import sk.is.urso.reg.model.ZaznamRegistraInputDetail;
import sk.is.urso.reg.model.ZaznamRegistraList;
import sk.is.urso.reg.model.ZaznamRegistraListRequest;
import sk.is.urso.reg.model.ZaznamRegistraOutputDetail;
import sk.is.urso.reg.model.ZaznamRegistraReferencia;
import sk.is.urso.rest.model.ZaznamRegistraXPathData;
import sk.is.urso.rest.model.ZaznamRegistraXPathZmena;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-29T11:27:41.522351500+02:00[Europe/Bratislava]")
@Validated
@Tag(name = "ZaznamRegistra", description = "the ZaznamRegistra API")
public interface ZaznamRegistraApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /zaznamRegistra/formio
     * Služba vytvorí záznam registra
     *
     * @param zaznamRegistraInputDetail údaje pridávaného záznamu registra (optional)
     * @return Úspešne vytvorený záznam registra (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraFormioPost",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne vytvorený záznam registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/zaznamRegistra/formio",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraOutputDetail> zaznamRegistraFormioPost(
        @Parameter(name = "ZaznamRegistraInputDetail", description = "") @Valid @RequestBody(required = false) ZaznamRegistraInputDetail zaznamRegistraInputDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /zaznamRegistra/formio
     * Služba aktualizuje záznam registra
     *
     * @param zaznamRegistraInputDetail upravené údaje záznamu registra (optional)
     * @return Úspešne aktualizovaný záznam registra (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný. (status code 401)
     *         or Operácia zamietnutá. (status code 403)
     *         or Neočakavaná chyba aplikácie. (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraFormioPut",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne aktualizovaný záznam registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/zaznamRegistra/formio",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraOutputDetail> zaznamRegistraFormioPut(
        @Parameter(name = "ZaznamRegistraInputDetail", description = "") @Valid @RequestBody(required = false) ZaznamRegistraInputDetail zaznamRegistraInputDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /zaznamRegistra/formio/{registerId}/{verziaRegistraId}/{zaznamId}
     * Služba vráti záznam registra podľa identifikátora vo formio JSON formáte
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu reegistra (required)
     * @return Úspešne vrátený detail záznamu registra (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam registra s daným kódom neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraFormioRegisterIdVerziaRegistraIdZaznamIdGet",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne vrátený detail záznamu registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam registra s daným kódom neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/zaznamRegistra/formio/{registerId}/{verziaRegistraId}/{zaznamId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraOutputDetail> zaznamRegistraFormioRegisterIdVerziaRegistraIdZaznamIdGet(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /zaznamRegistra
     * Služba vytvorí záznam registra
     *
     * @param zaznamRegistraInputDetail údaje pridávaného záznamu registra (optional)
     * @return Úspešne vytvorený záznam registra (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraPost",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne vytvorený záznam registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/zaznamRegistra",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraOutputDetail> zaznamRegistraPost(
        @Parameter(name = "ZaznamRegistraInputDetail", description = "") @Valid @RequestBody(required = false) ZaznamRegistraInputDetail zaznamRegistraInputDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /zaznamRegistra
     * Služba aktualizuje záznam registra
     *
     * @param zaznamRegistraInputDetail upravené údaje záznamu registra (optional)
     * @return Úspešne aktualizovaný záznam registra (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný. (status code 401)
     *         or Operácia zamietnutá. (status code 403)
     *         or Neočakavaná chyba aplikácie. (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraPut",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne aktualizovaný záznam registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/zaznamRegistra",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraOutputDetail> zaznamRegistraPut(
        @Parameter(name = "ZaznamRegistraInputDetail", description = "") @Valid @RequestBody(required = false) ZaznamRegistraInputDetail zaznamRegistraInputDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /zaznamRegistraReferencia/{registerId}/{verziaRegistraId}/{zaznamId}/{modulId}
     * Služba odstráni referenciu na daný záznam registra
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu registra (required)
     * @param modulId identifikátor modulu (required)
     * @return Úspešné znížený počet referencií na daný záznam registra pre daný modul (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam s daným id číselníka neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraReferenciaRegisterIdVerziaRegistraIdZaznamIdModulIdDelete",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešné znížený počet referencií na daný záznam registra pre daný modul", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraReferencia.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam s daným id číselníka neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/zaznamRegistraReferencia/{registerId}/{verziaRegistraId}/{zaznamId}/{modulId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraReferencia> zaznamRegistraReferenciaRegisterIdVerziaRegistraIdZaznamIdModulIdDelete(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId,
        @Size(min = 2, max = 8) @Parameter(name = "modulId", description = "", required = true) @PathVariable("modulId") String modulId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /zaznamRegistraReferencia/{registerId}/{verziaRegistraId}/{zaznamId}/{modulId}
     * Služba vráti referenciu na daný záznam registra
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu registra (required)
     * @param modulId identifikátor modulu (required)
     * @return Úspešne nájdená a vrátená referencia záznamu registra (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam registra s daným kódom neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraReferenciaRegisterIdVerziaRegistraIdZaznamIdModulIdGet",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne nájdená a vrátená referencia záznamu registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraReferencia.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam registra s daným kódom neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/zaznamRegistraReferencia/{registerId}/{verziaRegistraId}/{zaznamId}/{modulId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraReferencia> zaznamRegistraReferenciaRegisterIdVerziaRegistraIdZaznamIdModulIdGet(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId,
        @Size(min = 2, max = 8) @Parameter(name = "modulId", description = "", required = true) @PathVariable("modulId") String modulId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /zaznamRegistraReferencia/{registerId}/{verziaRegistraId}/{zaznamId}/{modulId} : Služba pridá referenciu na daný záznam registra
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu registra (required)
     * @param modulId identifikátor modulu (required)
     * @return Úspešné zvýšený počet referencií na daný záznam registra pre daný modul (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam s daným id číselníka neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraReferenciaRegisterIdVerziaRegistraIdZaznamIdModulIdPost",
        summary = "Služba pridá referenciu na daný záznam registra",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešné zvýšený počet referencií na daný záznam registra pre daný modul", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraReferencia.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam s daným id číselníka neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/zaznamRegistraReferencia/{registerId}/{verziaRegistraId}/{zaznamId}/{modulId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraReferencia> zaznamRegistraReferenciaRegisterIdVerziaRegistraIdZaznamIdModulIdPost(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId,
        @Size(min = 2, max = 8) @Parameter(name = "modulId", description = "", required = true) @PathVariable("modulId") String modulId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    @Operation(
            operationId = "zaznamRegistraReferenciaRegisterIdVerziaRegistraIdZaznamIdModulIdPost",
            summary = "Služba pridá referenciu na daný záznam registra",
            tags = { "ZaznamRegistra" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Úspešné zvýšený počet referencií na daný záznam registra pre daný modul", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraReferencia.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Záznam s daným id číselníka neexistuje")
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/zaznamRegistraReferencia/{registerId}/{verziaRegistraId}/{zaznamId}/{modulId}",
            produces = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraReferencia> zaznamRegistraReferenciaRegisterIdVerziaRegistraIdZaznamIdModulIdPut(
            @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
            @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
            @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId,
            @Size(min = 2, max = 8) @Parameter(name = "modulId", description = "", required = true) @PathVariable("modulId") String modulId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * POST /zaznamRegistra/{registerId}/{verziaRegistraId}/filter
     * Služba vráti zoznam záznamov registra podľa filtra
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamRegistraListRequest filter (optional)
     * @return Zoznam záznamov registra (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný. (status code 401)
     *         or Operácia zamietnutá. (status code 403)
     *         or Neočakavaná chyba aplikácie. (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraRegisterIdVerziaRegistraIdFilterPost",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Zoznam záznamov registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/zaznamRegistra/{registerId}/{verziaRegistraId}/filter",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraList> zaznamRegistraRegisterIdVerziaRegistraIdFilterPost(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "ZaznamRegistraListRequest", description = "") @Valid @RequestBody(required = false) ZaznamRegistraListRequest zaznamRegistraListRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ null, null ], \"total\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}/actual
     * Služba vráti záznam registra s aktuálne platnými historickými elementmi podľa identifikátora
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu registra (required)
     * @return Úspešne vrátený detail záznamu registra (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam registra s daným kódom neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdActualGet",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne vrátený detail záznamu registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam registra s daným kódom neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}/actual",
        produces = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraOutputDetail> zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdActualGet(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}
     * Služba odstráni záznam registra podľa identifikátora
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu registra (required)
     * @return Záznam registra bol úspešne odstránený (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam s daným id číselníka neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdDelete",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Záznam registra bol úspešne odstránený"),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam s daným id číselníka neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdDelete(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}
     * Služba vráti záznam registra podľa identifikátora
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu registra (required)
     * @return Úspešne vrátený detail záznamu registra (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam registra s daným kódom neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdGet",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne vrátený detail záznamu registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam registra s daným kódom neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}",
        produces = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraOutputDetail> zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdGet(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}/xpath
     * Služba vráti XML časti pre daný XPath výraz
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu registra (required)
     * @param xpath XPath výraz (required)
     * @return Nájdený zoznam XML častí (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam registra s daným kódom neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdXpathGet",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Nájdený zoznam XML častí", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraXPathData.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam registra s daným kódom neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}/xpath",
        produces = { "application/json" }
    )
    default ResponseEntity<List<ZaznamRegistraXPathData>> zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdXpathGet(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId,
        @NotNull @Parameter(name = "xpath", description = "", required = true) @Valid @RequestParam(value = "xpath", required = true) List<String> xpath
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"xpath\" : \"xpath\", \"hodnota\" : \"hodnota\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}/xpath
     * Služba aktualizuje XML časti podľa XPath výrazu
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @param zaznamId identifikátor záznamu registra (required)
     * @param zaznamRegistraXPathZmena XPath výraz (optional)
     * @return Úspešne aktualizovaný záznam registra (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam registra s daným kódom neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdXpathPut",
        tags = { "ZaznamRegistra" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne aktualizovaný záznam registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ZaznamRegistraOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam registra s daným kódom neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/zaznamRegistra/{registerId}/{verziaRegistraId}/{zaznamId}/xpath",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ZaznamRegistraOutputDetail> zaznamRegistraRegisterIdVerziaRegistraIdZaznamIdXpathPut(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "zaznamId", description = "", required = true) @PathVariable("zaznamId") Long zaznamId,
        @Parameter(name = "ZaznamRegistraXPathZmena", description = "") @Valid @RequestBody(required = false) ZaznamRegistraXPathZmena zaznamRegistraXPathZmena
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
