/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.is.urso.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;
import sk.is.urso.rest.model.CiselnikInputDetail;
import sk.is.urso.rest.model.CiselnikList;
import sk.is.urso.rest.model.CiselnikListRequest;
import sk.is.urso.rest.model.CiselnikOutputDetail;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-29T11:27:41.522351500+02:00[Europe/Bratislava]")
@Validated
@Tag(name = "Ciselnik", description = "the Ciselnik API")
public interface CiselnikApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /ciselnik
     * Služba vytvorí nový číselník
     *
     * @param ciselnikInputDetail údaje pridávaného číselníka (optional)
     * @return Úspešne vytvorený nový číselník (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "createCiselnik",
        tags = { "Ciselnik" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne vytvorený nový číselník", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CiselnikOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ciselnik",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CiselnikOutputDetail> createCiselnik(
        @Parameter(name = "CiselnikInputDetail", description = "") @Valid @RequestBody(required = false) CiselnikInputDetail ciselnikInputDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"platnostDo\" : \"2000-01-23\", \"nazovCiselnika\" : \"nazovCiselnika\", \"platnostOd\" : \"2000-01-23\", \"id\" : 0, \"kodCiselnika\" : \"kodCiselnika\", \"externyKod\" : \"externyKod\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /ciselnik/{id}
     * Služba odstráni číselník podľa identifikátora
     *
     * @param id identifikátor číselníka (required)
     * @return Hodnota bola úspešne odstránená (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Záznam s daným id číselníka neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "deleteCilsenik",
        tags = { "Ciselnik" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Hodnota bola úspešne odstránená"),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Záznam s daným id číselníka neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ciselnik/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> deleteCilsenik(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /ciselnik/filter
     * Služba vráti zoznam číselníkov podľa filtra
     *
     * @param ciselnikListRequest filter (optional)
     * @return Zoznam číselníkov (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "filterCiselnik",
        tags = { "Ciselnik" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Zoznam číselníkov", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CiselnikList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ciselnik/filter",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CiselnikList> filterCiselnik(
        @Parameter(name = "CiselnikListRequest", description = "") @Valid @RequestBody(required = false) CiselnikListRequest ciselnikListRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"nazovCiselnika\" : \"nazovCiselnika\", \"id\" : 6, \"kodCiselnika\" : \"kodCiselnika\", \"externyKod\" : \"externyKod\" }, { \"nazovCiselnika\" : \"nazovCiselnika\", \"id\" : 6, \"kodCiselnika\" : \"kodCiselnika\", \"externyKod\" : \"externyKod\" } ], \"total\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /ciselnik/{id}
     * Služba vráti číselník podľa identifikátora
     *
     * @param id identifikátor číselníka (required)
     * @return Úspešne nájdený a vráteny detail číselníka (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "getCilsenik",
        tags = { "Ciselnik" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne nájdený a vráteny detail číselníka", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CiselnikOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ciselnik/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<CiselnikOutputDetail> getCilsenik(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"platnostDo\" : \"2000-01-23\", \"nazovCiselnika\" : \"nazovCiselnika\", \"platnostOd\" : \"2000-01-23\", \"id\" : 0, \"kodCiselnika\" : \"kodCiselnika\", \"externyKod\" : \"externyKod\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /ciselnik/{id}
     * Služba aktualizuje číselník podľa identifikátora a parametrov
     *
     * @param id identifikátor číselníka (required)
     * @param ciselnikInputDetail upravené údaje číselníka (optional)
     * @return Služba úspešne aktualizovala číselník a vrátila detail. (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný. (status code 401)
     *         or Operácia zamietnutá. (status code 403)
     *         or Neočakavaná chyba aplikácie. (status code 200)
     */
    @Operation(
        operationId = "updateCilsenik",
        tags = { "Ciselnik" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Služba úspešne aktualizovala číselník a vrátila detail.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CiselnikOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/ciselnik/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<CiselnikOutputDetail> updateCilsenik(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Long id,
        @Parameter(name = "CiselnikInputDetail", description = "") @Valid @RequestBody(required = false) CiselnikInputDetail ciselnikInputDetail
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"platnostDo\" : \"2000-01-23\", \"nazovCiselnika\" : \"nazovCiselnika\", \"platnostOd\" : \"2000-01-23\", \"id\" : 0, \"kodCiselnika\" : \"kodCiselnika\", \"externyKod\" : \"externyKod\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
