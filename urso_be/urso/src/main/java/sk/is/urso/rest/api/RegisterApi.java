/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package sk.is.urso.rest.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;
import sk.is.urso.rest.model.FormioSchemaTyp;
import sk.is.urso.rest.model.RegisterList;
import sk.is.urso.rest.model.RegisterListRequest;
import sk.is.urso.rest.model.RegisterOutputDetail;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.Size;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-29T11:27:41.522351500+02:00[Europe/Bratislava]")
@Validated
@Tag(name = "Register", description = "the Register API")
public interface RegisterApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /register/filter
     * Služba vráti zoznam registrov podľa filtra
     *
     * @param registerListRequest filter (optional)
     * @return Zoznam registrov (status code 200)
     *         or Nesprávny vstup. (status code 400)
     *         or Žiadateľ služby nie je autorizovaný. (status code 401)
     *         or Operácia zamietnutá. (status code 403)
     *         or Neočakavaná chyba aplikácie. (status code 200)
     */
    @Operation(
        operationId = "registerFilterPost",
        tags = { "Register" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Zoznam registrov", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegisterList.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/register/filter",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<RegisterList> registerFilterPost(
        @Parameter(name = "RegisterListRequest", description = "") @Valid @RequestBody(required = false) RegisterListRequest registerListRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : [ { \"platnostDo\" : \"2000-01-23\", \"nazov\" : \"nazov\", \"externy\" : true, \"registerId\" : \"registerId\", \"popis\" : \"popis\", \"overeny\" : true, \"verziaId\" : 6, \"platnostOd\" : \"2000-01-23\", \"identifikovany\" : true, \"gdprRelevantny\" : true, \"povoleny\" : true }, { \"platnostDo\" : \"2000-01-23\", \"nazov\" : \"nazov\", \"externy\" : true, \"registerId\" : \"registerId\", \"popis\" : \"popis\", \"overeny\" : true, \"verziaId\" : 6, \"platnostOd\" : \"2000-01-23\", \"identifikovany\" : true, \"gdprRelevantny\" : true, \"povoleny\" : true } ], \"total\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /register/{registerId}/{verziaRegistraId}/formio/{formioSchemaTyp}
     * Služba vráti formio schému definujúcu formio JSON údaje
     *
     * @param registerId identifikátor registra  (required)
     * @param verziaRegistraId verzia registra (required)
     * @param formioSchemaTyp typ formio schémy (required)
     * @return Úspešne nájdená a vrátená formio schéma (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Formio schéma neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "registerRegisterIdVerziaRegistraIdFormioFormioSchemaTypGet",
        tags = { "Register" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne nájdená a vrátená formio schéma", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Formio schéma neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/register/{registerId}/{verziaRegistraId}/formio/{formioSchemaTyp}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> registerRegisterIdVerziaRegistraIdFormioFormioSchemaTypGet(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId,
        @Parameter(name = "formioSchemaTyp", description = "", required = true) @PathVariable("formioSchemaTyp") FormioSchemaTyp formioSchemaTyp
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /register/{registerId}/{verziaRegistraId}
     * Služba vráti detail registra podľa identifikátorov
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @return Úspešne nájdený a vráteny detail registra (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or Registra s danými identifikátormi neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "registerRegisterIdVerziaRegistraIdGet",
        tags = { "Register" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne nájdený a vráteny detail registra", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegisterOutputDetail.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Registra s danými identifikátormi neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/register/{registerId}/{verziaRegistraId}",
        produces = { "application/json" }
    )
    default ResponseEntity<RegisterOutputDetail> registerRegisterIdVerziaRegistraIdGet(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /register/{registerId}/{verziaRegistraId}/xsd
     * Služba vráti XSD definíciu pre daný register
     *
     * @param registerId identifikátor registra (required)
     * @param verziaRegistraId verzia registra (required)
     * @return Úspešne nájdená a vrátená XSD definícia (binárny súbor) (status code 200)
     *         or Nesprávny vstup (status code 400)
     *         or Žiadateľ služby nie je autorizovaný (status code 401)
     *         or Operácia zamietnutá (status code 403)
     *         or XSD definícia pre daný register neexistuje (status code 404)
     *         or Neočakavaná chyba aplikácie (status code 200)
     */
    @Operation(
        operationId = "registerRegisterIdVerziaRegistraIdXsdGet",
        tags = { "Register" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Úspešne nájdená a vrátená XSD definícia (binárny súbor)", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Nesprávny vstup", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "401", description = "Žiadateľ služby nie je autorizovaný", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Operácia zamietnutá", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "XSD definícia pre daný register neexistuje")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/register/{registerId}/{verziaRegistraId}/xsd",
        produces = { "application/xml", "application/json" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> registerRegisterIdVerziaRegistraIdXsdGet(
        @Size(min = 1, max = 256) @Parameter(name = "registerId", description = "", required = true) @PathVariable("registerId") String registerId,
        @Parameter(name = "verziaRegistraId", description = "", required = true) @PathVariable("verziaRegistraId") Integer verziaRegistraId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
